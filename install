#!/usr/bin/env bash
#
# Copyright (c) 2015 Joyent Inc., All rights reserved.
#
# Install Ubuntu 14.04 into a directory, modify the installation, then tar it up.
#

set -euo pipefail
IFS=$'\n\t'

GUESTTOOLS=guesttools
BUILD_DATE=$(date +%Y%m%d)

usage() {
cat <<EOF

Install and modify Ubuntu in a given directory using a given mirror.

Usage:
  $0 -r <RELEASE> -d <INSTALL_DIR> -m <MIRROR> -i <IMAGE_NAME> -p <NAME> -D <DESC> -u <DOCS>

Example:
  $0 -r trusty -d /mnt/chroot -m http://archive.ubuntu.com/ubuntu/ -i lx-ubuntu-14.04 -p "Ubuntu 14.04 LX Brand" -D "Ubuntu 14.04 64-bit lx-brand image." -u https://docs.joyent.com/images/lx-brand-beta

OPTIONS:
  -r The desired release (e.g "trusty")
  -d A path to the install directory
  -m A URL for the desired archive mirror
  -i The name of the image. This is used for naming the tarball.
  -p The proper name of the image. Use quotes. This is used in the MOTD and /etc/product file.
  -D A description for the image. This is used in the image manifest and the /etc/product file.
  -u A URL to the image docs [optional]
  -h Show this message

EOF
}

RELEASE=
INSTALL_DIR=
MIRROR=
IMAGE_NAME=
NAME=
DESC=
DOCS=

while getopts "hr:d:m:i:p:D:u:" OPTION
do
  case $OPTION in
    h)
      usage
      exit
      ;;
    r)
      RELEASE=${OPTARG}
      ;;
    d)
      INSTALL_DIR=${OPTARG%/}
      ;;
    m)
      MIRROR=${OPTARG}
      ;;
    i)
      IMAGE_NAME=${OPTARG}
      ;;
    p)
      NAME=${OPTARG}
      ;;
    D)
      DESC=${OPTARG}
      ;;
    u)
      DOCS=${OPTARG}
      ;;
    \?)
      usage
      exit
      ;;
  esac
done

if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

if [[ -z ${RELEASE} ]]; then
  echo "Error: missing release (-r) value"
  exit 1
fi

if [[ ! -e ${INSTALL_DIR} ]] ; then
  echo "Directory $INSTALL_DIR not found"
  exit 1
fi

if [[ -z ${INSTALL_DIR} ]]; then
  echo "Error: missing install directory (-d) value"
  exit 1
fi

if [[ -z ${MIRROR} ]]; then
  echo "Error: missing mirror (-m) value"
  exit 1
fi

if [[ -z ${IMAGE_NAME} ]]; then
  echo "Error: missing image name (-i) value"
  exit 1
fi

if [[ -z ${NAME} ]]; then
  echo "Error: missing proper name (-p) value"
  exit 1
fi

if [[ -z ${DESC} ]]; then
  echo "Error: missing image description (-D) value"
  exit 1
fi

TARGET="${IMAGE_NAME}-${BUILD_DATE}.tar.gz"

if [[ -z ${DOCS} ]]; then
  DOCS="https://docs.joyent.com/images/lx-brand-beta"
fi

echo "==> Installing Ubuntu 14.04 into $INSTALL_DIR"

if [[ -d $INSTALL_DIR ]]; then
  echo "====> Found previous install dicectory. Deleting and creating a new one."
  rm -rf $INSTALL_DIR
  mkdir -p $INSTALL_DIR
fi

debootstrap --components=main \
    --include=ca-certificates,curl,less,man-db,openssh-server,sudo,wget,vim-tiny \
    $RELEASE $INSTALL_DIR $MIRROR
echo "==> Done!"

echo "==> Setting locale to en_US.UTF-8"
chroot $INSTALL_DIR locale-gen en_US.UTF-8
chroot $INSTALL_DIR DEBIAN_FRONTEND=noninteractive; dpkg-reconfigure locales
echo "LANG=\"en_US.UTF-8\"" > $INSTALL_DIR/etc/default/locale

echo "==> Updating $INSTALL_DIR/etc/apt/sources.list"
cat << SOURCES > $INSTALL_DIR/etc/apt/sources.list
deb http://archive.ubuntu.com/ubuntu $RELEASE main
deb-src http://archive.ubuntu.com/ubuntu $RELEASE main
deb http://archive.ubuntu.com/ubuntu $RELEASE-updates main
deb-src http://archive.ubuntu.com/ubuntu $RELEASE-updates main
deb http://security.ubuntu.com/ubuntu $RELEASE-security main
deb-src http://security.ubuntu.com/ubuntu $RELEASE-security main

deb http://archive.ubuntu.com/ubuntu $RELEASE universe
deb-src http://archive.ubuntu.com/ubuntu $RELEASE universe
deb http://archive.ubuntu.com/ubuntu $RELEASE-updates universe
deb-src http://archive.ubuntu.com/ubuntu $RELEASE-updates universe
deb http://security.ubuntu.com/ubuntu $RELEASE-security universe
deb-src http://security.ubuntu.com/ubuntu $RELEASE-security universe
SOURCES

echo "==> Updating packages"
chroot $INSTALL_DIR DEBIAN_FRONTEND=noninteractive; apt-get -y update
chroot $INSTALL_DIR DEBIAN_FRONTEND=noninteractive; apt-get -y upgrade

echo "==> Cleaning up caches etc."
chroot $INSTALL_DIR apt-get -y autoremove
chroot $INSTALL_DIR apt-get -y clean
rm -rf $INSTALL_DIR/var/lib/apt/lists/*

echo "==> Setting TZ to UTC"
rm $INSTALL_DIR/etc/localtime
cp $INSTALL_DIR/usr/share/zoneinfo/UTC $INSTALL_DIR/etc/localtime

echo "==> Disabling PasswordAuthentication"
sed s/PasswordAuthentication\ yes/PasswordAuthentication\ no/ -i $INSTALL_DIR/etc/ssh/sshd_config

echo "==> Removing resolvconf entries in $INSTALL_DIR/etc/resolvconf/resolv.conf.d/"
rm -rf $INSTALL_DIR/etc/resolvconf/resolv.conf.d/tail
rm -rf $INSTALL_DIR/etc/resolvconf/resolv.conf.d/original

echo "==> Adding getty service on ttyS0 for 'vmadm console' command"
cat << TTYS0 > $INSTALL_DIR/etc/init/ttyS0.conf
# ttyS0 - getty
#
# This service maintains a getty on ttyS0 from the point the system is
# started until it is shut down again.
# On SmartOS and Smart Data Center this allows you to attach a console
# via the 'vmadm console UUID' command

start on stopped rc RUNLEVEL=[2345] and (
            not-container or
            container CONTAINER=lxc or
            container CONTAINER=lxc-libvirt)

stop on runlevel [!2345]

respawn
exec /sbin/getty -L 115200 ttyS0 vt102 

TTYS0


echo "==> Creating /etc/motd"
cat << MOTD > $INSTALL_DIR/etc/motd
   __        .                   .
 _|  |_      | .-. .  . .-. :--. |-
|_    _|     ;|   ||  |(.-' |  | |
  |__|   \`--'  \`-' \`;-| \`-' '  ' \`-'
                   /  ;  Instance ($NAME $BUILD_DATE)
                   \`-'   $DOCS

MOTD

echo "==> Creating /etc/product file"
cat << PRODUCT > $INSTALL_DIR/etc/product
Name: Joyent Instance
Image: $NAME $BUILD_DATE
Documentation: $DOCS
Description: $DESC
PRODUCT

echo "==> Installing Guest tools in $INSTALL_DIR"
echo "====> Initiallizing and fetching submodule $GUESTTOOLS"
git submodule init
git submodule update
echo "====> Running ./install.sh -i $INSTALL_DIR"
cd $GUESTTOOLS
./install.sh -i $INSTALL_DIR
cd ..

echo "==> Saving installation as $TARGET. This may take a few minutes."
tar czf $TARGET --exclude-from=exclude.txt $INSTALL_DIR/

echo "==> Installation complete!"
echo "==> $TARGET"

exit 0
